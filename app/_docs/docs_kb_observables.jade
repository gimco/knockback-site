extends ../_layout/_layout_template

include ../_layout/_layout_mixins
include ../_docs/_docs_mixins

block title
  title Knockback.js Docs

block includes
  link(rel='stylesheet', href='stylesheets/docs.css')

block navbar
  mixin pageNavbar('Docs', true)

block api_descriptions

  //////////////////////////////////
  // kb.Observables
  //////////////////////////////////
  h2='kb.Observables'
  div="Used to generate observables manually for a model's attributes"
  h4 Example:
  pre(data-for='cs').
    ContactViewModel = (model) ->
      @attribute_observables = kb.observables(model, {
        name:     {key: 'name'}
        number:   'number'
        date:     {key:'date', localizer: LongDateLocalizer}
        name2:    {key: 'name'}
      }, this)
      @

    model = new Contact({name: 'John', number: '555-555-5558', date: new Date(1940, 10, 9)})
    view_model = new ContactViewModel(model)

  pre(data-for='js').
    var ContactViewModel = function(model) {
      this.attribute_observables = kb.observables(model, {
        name:     {key: 'name'}
        number:   'number'
        date:     {key:'date', localizer: LongDateLocalizer}
        name2:    {key: 'name'}
      }, this);
    };

    var model = new Contact({name: 'John', number: '555-555-5558', date: new Date(1940, 10, 9)});
    view_model = new ContactViewModel(model);

  h3#factory kb.observables(model, mappings_info, [view_model], [options]) <span class='label label-info'>factory</span>
  div Used to create a new instance
  h4 Parameters
    ol
      li
        strong model:
        span.type { Backbone.Model }:
        span='the model whose attributes will be synchronized '
      li
        strong mappings_info:
        span.type { [mapping_info as would be passed to each kb.observable | string for an attribute key] + {key: string}}:
      li
        strong view_model: <span class='label label-inverse'>optional</span> the view model target to set the properties for each mapped attribute (the kb.Observables instance itself will always have the generated observables set in its properties) '

  h4 Example:
  pre(data-for='cs').
    view_model = {}
    kb.observables(model, {name: 'name', date: 'date'}, view_model)

  pre(data-for='js').
    var view_model = {};
    kb.observables(model, {name: 'name', date: 'date'}, view_model);

  h3#constructor constructor(model, mappings_info, [view_model], [options])
  div Used to create a new instance
  h4 Parameters
    ol
      li
        strong model:
        span.type { Backbone.Model }:
        span the model whose attributes will be synchronized
      li
        strong mappings_info:
        span.type  { [mapping_info as would be passed to each kb.observable | string for an attribute key] + {key: string}}:
      li
        strong view_model: <span class='label label-inverse'>optional</span>
        span  the view model target to set the properties for each mapped attribute (the kb.Observables instance itself will always have the generated observables set in its properties)

  h4 Example:
  pre(data-for='cs').
    view_model = {}
    new kb.Observables(model, {name: 'name', date: 'date'}, view_model)

  pre(data-for='js').
    var view_model = {}
    new kb.Observables(model, {name: 'name', date: 'date'}, view_model);

  h3#destroy destroy()
  div Used to release the memory of the object

  h3#set_to_default setToDefault()
  div="Used to return all of the owned observables to their default values (if they exist)"
  pre(data-for='cs').
    ContactViewModel = (model) ->
      @loading_message = ko.observable('(none)')
      @attribute_observables = kb.observables(model, {
        name:     {key:'name', default: @loading_message}
        number:   {key:'number', default: @loading_message}
      }, this)
      @

    view_model = new ContactViewModel(new Backbone.Model({name: 'Bob'}))
    # name is Bob and number is (none)

    view_model.setToDefault()
    # name and number are (none)

    view_model.loading_message('(nada)')
    # name and number are (nada)

  pre(data-for='js').
    var ContactViewModel = function(model){
      this.loading_message = ko.observable('(none)');
      this.attribute_observables = kb.observables(model, {
        name:     {key:'name', default: @loading_message},
        number:   {key:'number', default: @loading_message}
      }, this);
    };

    var view_model = new ContactViewModel(new Backbone.Model({name: 'Bob'}));
    // name is Bob and number is (none)

    view_model.attribute_observables.setToDefault()
    // name and number are (none)

    view_model.loading_message('(nada)')
    // name and number are (nada)

block content
  div.api.container
    h1 Knockback.js API and Usage Examples
    div.container-fluid
      div.row-fluid
        div.span3.api.index
          mixin docsIndex('kb.Observables', [{factory: 'kb.observables'}, {constructor: 'constructor'}, {destroy: 'destroy'}, {observable_set_to_default: 'setToDefault'}])
        div.span9.api.descriptions
          div.content
            div.wrapper
              block api_descriptions
