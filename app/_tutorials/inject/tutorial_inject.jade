extends ../../_layout/_layout_template

include ../../_layout/_layout_mixins

block title
  title Tutorial: ViewModel Injection (like Angular.js)
  <>

block includes
  link(rel='stylesheet', href='css/tutorial.css')
  include ../../_layout/_layout_include_demo_scripts

block navbar
  mixin pageNavbar('Tutorials', true)

block content
  :markdown
    #Tutorial: ViewModel Injection (like Angular.js)

    [Knockback.js](index.html) provides an a few helpers to inject ViewModels into your HTML Views in a similar way to [Angular.js's ng-app](http://angularjs.org/) so you can build up an application by dynamically binding observables directly from your HTML.

    The following examples show how you might port Angular.js samples to Knockback to help you compare approaches. There's nothing complicated here, just a 'kb-inject' attribute and a custom 'inject' Knockout binding to add observables to your ViewModel.

    The main way to bind a View when your page is loaded, is to use a 'kb-inject' attribute on your HTML elements. You can optionally provide some hooks if you like:

  pre.
    <!-- BIND WITHOUT PARAMETERS - create a new view model and bind the hierachy -->
    <html kb-inject>
      <!-- YOUR VIEW HERE !! -->
    </html>

    <!-- BIND WITH PARAMETERS - create a custom view model and callback after bind -->
    <html kb-inject="view_model: {name: ko.observable('')}, afterBinding: yourFunction">
      <!-- YOUR VIEW HERE !! -->
    </html>

  :markdown
    In addition to help you inject observables to your ViewModel, you can use the 'inject' custom binding. It accepts an object to extend your ViewModel or a function of the form yourFunction(view_model, element) to allow you to extend the view model by hand:

  pre.
    <!-- INJECT A TO EXTEND YOUR VIEW MODEL -->
    <div data-bind="inject: {name: ko.observable('')}"></div>

    <!-- INJECT A USING A CUSTOM FUNCTION -->
    <div data-bind="inject: ProjectAppController"></div>

  :markdown

    That's basically it...it's really a lot easier than memorizing or looking up a large number of custom 'ng-{something}' bindings and you can reuse your knowledge of Knockback.js, Knockout.js, and Backbone.js!

    ##Getting Started - Hello World!

    There are a few helpers to get us started:

  pre(data-for='cs')
    include kbi_helpers.coffee

  pre(data-for='js')
    include ../../../public/tutorials/inject/kbi_helpers.js

  :markdown
    ##Hello Example

    This example uses the 'kb-inject' attribute to seed a root application ViewModel with a yourName observable (like a more flexible ng-model binding).

  div.row-fluid
    div.span8
      h4 View (HTML)
      pre
        include kbi_hello_view.html.txt

    div.span4
      h4 Live Result
      div.demos_result_box
        include kbi_hello_view.html

  :markdown
    You could have just as easily written the first line like:
  pre.
    <div data-bind="inject: {yourName: ko.observable('')}" kb-inject>

  :markdown
    ##Todo Example

    The todo example uses a custom 'TodoCtrl' inject function to add some functions and observables to your view model. Then you can bind them to your HTML using standard Knockout bindings.

  div.row-fluid
    div.span8
      ul.nav.nav-tabs
        li.active <a href="#kbi_todo_view" data-toggle="tab">View (HTML)</a>
        li <a href="#kbi_todo_view_model" data-toggle="tab">Controller (CS/JS)</a>
        li <a href="#kbi_todo_css" data-toggle="tab">Styling (CSS)</a>
      div.tab-content
        div.tab-pane.active#kbi_todo_view
          pre
            include kbi_todo_view.html.txt
        div.tab-pane#kbi_todo_view_model
          pre(data-for='cs')
            include kbi_todo_controller.coffee

          pre(data-for='js')
            include ../../../public/tutorials/inject/kbi_todo_controller.js

        div.tab-pane#kbi_todo_css
          pre
            include kbi_todo.css

    div.span4
      h4 Live Result
      div.demos_result_box
        link(rel='stylesheet', href='tutorials/inject/kbi_todo.css')
        script(type='application/javascript', src='tutorials/inject/kbi_todo_controller.js')
        include kbi_todo_view.html

  :markdown
    ##Project Example

    Before we start the example, we'll explain the form validations. Currently the following is the best documentation on the Knockback form validations. We will improve the documentation after the library has been enhanced with more common functionality.

    When you bind a form, Knockback will put '$' in front of the names of your inputs directly on your ViewModel or if you provide a form name, it will attached them to a '$' form observable without the '$'s.

    **Variant 1: Named Form**

  pre.
    <form name="myForm">
      <input name="input1", data-bind="value: input1" required>
      <input type="url" name="input2", data-bind="value: input2">
    </form>
  :markdown
    Because there is a form name, it will add the following property to your ViewModel (wrapped in an observable):

  pre.
    $myForm: {
      input1: {required: boolean, valid: boolean, invalid: boolean},
      input2: {url: boolean, valid: boolean, invalid: boolean},
      valid: boolean,
      invalid: boolean
    }

  :markdown
    **Variant 2: Unnamed Form**

  pre.
    <form>
      <input name="input1", data-bind="value: input1" required>
      <input type="url" name="input2", data-bind="value: input2">
    </form>

  :markdown
    Because there is not a form name, it will extend the following on your ViewModel (each wrapped in an observable):

  pre.
    {
      $input1: {required: boolean, valid: boolean, invalid: boolean},
      $input2: {url: boolean, valid: boolean, invalid: boolean}
    }

  :markdown
    Now on with the example! This example shows:

    * how you can set up a Backbone.Router to control an embedded page using the 'kb-inject' afterBinding callback
    * how to inject Knockback-Validation's kb.formValidator which will look for named inputs and other keywords to create an observable that will update when form state changes.


  script(type='application/javascript', src='tutorials/inject/kbi_helpers.js')
  script(type='application/javascript', src='tutorials/inject/kbi_project_model.js')
  script(type='application/javascript', src='tutorials/inject/kbi_project_collection.js')
  script(type='application/javascript', src='tutorials/inject/kbi_project_app_controller.js')
  script(type='application/javascript', src='tutorials/inject/kbi_project_list_view_model.js')
  script(type='application/javascript', src='tutorials/inject/kbi_project_view_model.js')
  include kbi_project_list_view.html
  include kbi_project_detail_view.html

  div.row-fluid
    div.span8
      ul.nav.nav-tabs
        li.active <a href="#kbi_project_app_view" data-toggle="tab">App View (HTML)</a>
        li <a href="#kbi_project_list_view" data-toggle="tab">List View (HTML)</a>
        li <a href="#kbi_project_detail_view" data-toggle="tab">Detail View (HTML)</a>
        li <a href="#kbi_project_app_controller" data-toggle="tab">App Controller (CS/JS)</a>
        li <a href="#kbi_project_collection" data-toggle="tab">Project ORM (CS/JS)</a>
        li <a href="#kbi_project_list_view_model" data-toggle="tab">List ViewModel (CS/JS)</a>
        li <a href="#kbi_project_view_model" data-toggle="tab">Project ViewModel (CS/JS)</a>
      div.tab-content
        div.tab-pane.active#kbi_project_app_view
          pre
            include kbi_project_app_view.html.txt
        div.tab-pane#kbi_project_list_view
          pre
            include kbi_project_list_view.html.txt
        div.tab-pane#kbi_project_detail_view
          pre
            include kbi_project_detail_view.html.txt
        div.tab-pane#kbi_project_app_controller
          pre(data-for='cs')
            include kbi_project_app_controller.coffee
          pre(data-for='js')
            include ../../../public/tutorials/inject/kbi_project_app_controller.js
        div.tab-pane#kbi_project_collection
          pre(data-for='cs')
            include kbi_project_model.coffee
            include kbi_project_collection.coffee
          pre(data-for='js')
            include ../../../public/tutorials/inject/kbi_project_model.js
            include ../../../public/tutorials/inject/kbi_project_collection.js
        div.tab-pane#kbi_project_list_view_model
          pre(data-for='cs')
            include kbi_project_list_view_model.coffee
          pre(data-for='js')
            include ../../../public/tutorials/inject/kbi_project_list_view_model.js
        div.tab-pane#kbi_project_view_model
          pre(data-for='cs')
            include kbi_project_view_model.coffee
          pre(data-for='js')
            include ../../../public/tutorials/inject/kbi_project_view_model.js

    div.span4
      h4 Live Result
      div.demos_result_box
        include kbi_project_app_view.html

    script(type='application/javascript').
      kb.injectViewModels();